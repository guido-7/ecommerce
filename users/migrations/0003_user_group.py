# Generated by Django 5.2.3 on 2025-07-07 14:57

from django.db import migrations


def create_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    # Definisci i gruppi e i loro permessi
    groups_perms = {
        'Customer': [
            # Prodotti - solo visualizzazione
            'view_product',
            'view_category',
            'view_brand',

            # Ordini - pu√≤ creare e vedere i propri
            'add_order',
            'view_order',  # Limitato ai propri tramite QuerySet
        ],
        'Store Manager': [
            # Gestione completa prodotti
            'add_product',
            'change_product',
            'delete_product',
            'view_product',

            # Gestione completa categorie
            'add_category',
            'change_category',
            'delete_category',
            'view_category',

            # Gestione completa brand
            'add_brand',
            'change_brand',
            'delete_brand',
            'view_brand',

            # Gestione ordini (tutti)
            'view_order',
            'change_order',
            'delete_order',
        ],
    }

    for group_name, perms in groups_perms.items():
        group, created = Group.objects.get_or_create(name=group_name)
        if created:
            print(f"Creato gruppo: {group_name}")
        else:
            print(f"Gruppo esistente: {group_name}")

        # Svuota i permessi precedenti (se stai ri-eseguendo)
        group.permissions.clear()

        for codename in perms:
            try:
                perm = Permission.objects.get(codename=codename)
                group.permissions.add(perm)
                print(f"  - Aggiunto permesso: {codename}")
            except Permission.DoesNotExist:
                print(f"  - ATTENZIONE: Permesso non trovato: {codename}")

def reverse_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.filter(name__in=['Customer', 'Store Manager']).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_customuser_city_customuser_country_and_more'),
    ]

    operations = [
        migrations.RunPython(create_groups, reverse_groups),
    ]
